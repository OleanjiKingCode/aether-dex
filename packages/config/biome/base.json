{
  "$schema": "https://biomejs.dev/schemas/2.0.5/schema.json",
  "assist": {
    "actions": {
      "source": {
        "organizeImports": {
          "level": "on",
          "options": {
            "groups": [
              [":BUN:", ":NODE:"],
              ":BLANK_LINE:",
              ["next/**", "next"],
              ":BLANK_LINE:",
              [
                "react/**",
                "react",
                "react-dom",
                "react-dom/client",
                "react-dom/server"
              ],
              ":BLANK_LINE:",
              ":PACKAGE:",
              ":BLANK_LINE:",
              ":PACKAGE_WITH_PROTOCOL:",
              ":BLANK_LINE:",
              ":ALIAS:",
              ":BLANK_LINE:",
              ":PATH:"
            ]
          }
        },
        "useSortedAttributes": "on",
        "useSortedKeys": "on"
      }
    }
  },
  "css": { "formatter": { "enabled": true } },
  "formatter": {
    "attributePosition": "auto",
    "bracketSpacing": true,
    "enabled": true,
    "expand": "auto",
    "formatWithErrors": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 80
  },
  "javascript": {
    "formatter": {
      "enabled": true,
      "jsxQuoteStyle": "double",
      "quoteStyle": "double",
      "semicolons": "always",
      "trailingCommas": "all"
    },
    "parser": { "jsxEverywhere": false }
  },
  "json": { "parser": { "allowComments": true } },
  "linter": {
    "rules": {
      "complexity": {
        "noExcessiveCognitiveComplexity": {
          "level": "error",
          "options": { "maxAllowedComplexity": 20 }
        },
        "noUselessStringConcat": "error",
        "noUselessUndefinedInitialization": "error",
        "noVoid": "error",
        "useDateNow": "error",
        "useSimplifiedLogicExpression": "error"
      },
      "correctness": {
        "noConstantMathMinMaxClamp": "error",
        "noUndeclaredDependencies": "off",
        "noUnusedImports": "error",
        "useHookAtTopLevel": "error"
      },
      "nursery": {
        "noFloatingPromises": "error",
        "useSortedClasses": {
          "fix": "safe",
          "level": "error",
          "options": {
            "attributes": ["classList"],
            "functions": ["clsx", "cva", "tw", "tw.*", "cn"]
          }
        }
      },
      "recommended": true,
      "style": {
        "noDefaultExport": "error",
        "noImplicitBoolean": "error",
        "noNamespace": "error",
        "noParameterProperties": "error",
        "noShoutyConstants": "error",
        "noYodaExpression": "error",
        "useBlockStatements": "off",
        "useCollapsedElseIf": "error",
        "useConsistentArrayType": "error",
        "useConsistentBuiltinInstantiation": "error",
        "useDefaultSwitchClause": "error",
        "useExplicitLengthCheck": "error",
        "useFilenamingConvention": {
          "level": "error",
          "options": { "filenameCases": ["kebab-case"], "requireAscii": true }
        },
        "useForOf": "error",
        "useFragmentSyntax": "error",
        "useNamingConvention": {
          "level": "error",
          "options": {
            "conventions": [
              { "formats": ["PascalCase"], "selector": { "kind": "typeLike" } },
              {
                "formats": ["PascalCase", "CONSTANT_CASE", "camelCase"],
                "selector": { "kind": "variable" }
              },
              {
                "formats": ["camelCase", "PascalCase"],
                "selector": { "kind": "function" }
              },
              {
                "formats": ["camelCase"],
                "selector": { "kind": "namespaceLike" }
              }
            ],
            "requireAscii": true,
            "strictCase": false
          }
        },
        "useShorthandAssign": "error",
        "useThrowNewError": "error",
        "useThrowOnlyError": "error"
      },
      "suspicious": {
        "noAssignInExpressions": "off",
        "noEmptyBlockStatements": "error",
        "noMisplacedAssertion": "error",
        "noUnknownAtRules": "off",
        "useAwait": "error",
        "useErrorMessage": "error",
        "useNumberToFixedDigitsArgument": "error"
      }
    }
  },
  "overrides": [
    {
      "includes": [
        "**/*.d.ts",
        "**/*.config.ts",
        "**/*.config.js",
        "**/*.config.mjs",
        "**/*.config.cjs"
      ],
      "linter": { "rules": { "style": { "noDefaultExport": "off" } } }
    }
  ],
  "vcs": {
    "clientKind": "git",
    "defaultBranch": "main",
    "enabled": true,
    "useIgnoreFile": true
  }
}
